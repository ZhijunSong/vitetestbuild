{
  "version": 3,
  "sources": ["../../vuetify/src/composables/color.ts"],
  "sourcesContent": ["// Utilities\nimport { computed, isRef } from 'vue'\nimport { isCssColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  const backgroundIsCssColor = computed(() => isCssColor(colors.value.background))\n  const textIsCssColor = computed(() => isCssColor(colors.value.text))\n\n  const colorClasses = computed(() => {\n    const classes: string[] = []\n\n    if (colors.value.background && !backgroundIsCssColor.value) {\n      classes.push(`bg-${colors.value.background}`)\n    }\n\n    if (colors.value.text && !textIsCssColor.value) {\n      classes.push(`text-${colors.value.text}`)\n    }\n\n    return classes\n  })\n\n  const colorStyles = computed(() => {\n    const styles: CSSProperties = {}\n\n    if (colors.value.background && backgroundIsCssColor.value) {\n      styles.backgroundColor = colors.value.background\n    }\n\n    if (colors.value.text && textIsCssColor.value) {\n      styles.color = colors.value.text\n      styles.caretColor = colors.value.text\n    }\n\n    return styles\n  })\n\n  return { colorClasses, colorStyles }\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"],
  "mappings": ";;;;;;;;;AAoBO,kBAAmB,QAA6D;AACrF,QAAM,uBAAuB,SAAS,MAAM,WAAW,OAAO,MAAM,UAAd,CAAjB;AACrC,QAAM,iBAAiB,SAAS,MAAM,WAAW,OAAO,MAAM,IAAd,CAAjB;AAE/B,QAAM,eAAe,SAAS,MAAM;AAClC,UAAM,UAAoB,CAAA;AAE1B,QAAI,OAAO,MAAM,cAAc,CAAC,qBAAqB,OAAO;AAC1D,cAAQ,KAAM,MAAK,OAAO,MAAM,YAAhC;IACD;AAED,QAAI,OAAO,MAAM,QAAQ,CAAC,eAAe,OAAO;AAC9C,cAAQ,KAAM,QAAO,OAAO,MAAM,MAAlC;IACD;AAED,WAAO;EACR,CAZ4B;AAc7B,QAAM,cAAc,SAAS,MAAM;AACjC,UAAM,SAAwB,CAAA;AAE9B,QAAI,OAAO,MAAM,cAAc,qBAAqB,OAAO;AACzD,aAAO,kBAAkB,OAAO,MAAM;IACvC;AAED,QAAI,OAAO,MAAM,QAAQ,eAAe,OAAO;AAC7C,aAAO,QAAQ,OAAO,MAAM;AAC5B,aAAO,aAAa,OAAO,MAAM;IAClC;AAED,WAAO;EACR,CAb2B;AAe5B,SAAO;IAAE;IAAc;EAAhB;AACR;AAIM,sBACL,OACA,MACe;AACf,QAAM,SAAS,SAAS,MAAO;IAC7B,MAAM,MAAM,KAAD,IAAU,MAAM,QAAS,OAAO,MAAM,QAAQ;EAD5B,EAAR;AAIvB,QAAM;IACJ,cAAc;IACd,aAAa;MACX,SAAS,MAAD;AAEZ,SAAO;IAAE;IAAkB;EAApB;AACR;AAIM,4BACL,OACA,MACqB;AACrB,QAAM,SAAS,SAAS,MAAO;IAC7B,YAAY,MAAM,KAAD,IAAU,MAAM,QAAS,OAAO,MAAM,QAAQ;EADlC,EAAR;AAIvB,QAAM;IACJ,cAAc;IACd,aAAa;MACX,SAAS,MAAD;AAEZ,SAAO;IAAE;IAAwB;EAA1B;AACR;",
  "names": []
}
