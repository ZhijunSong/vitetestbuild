import {
  IconSymbol,
  VClassIcon,
  defaultSets
} from "./chunk-7DCSA2NJ.js";
import {
  RtlSymbol,
  createRtl,
  en_default,
  provideRtl,
  useRtl
} from "./chunk-7ACDKDXF.js";
import {
  DisplaySymbol,
  createDisplay,
  useDisplay
} from "./chunk-JXTRZU23.js";
import {
  ThemeSymbol,
  createTheme,
  useTheme
} from "./chunk-2HSEXNWG.js";
import {
  useLayout
} from "./chunk-FSBJFFZG.js";
import {
  DefaultsSymbol,
  consoleError,
  consoleWarn,
  createDefaults,
  defineComponent,
  getObjectValueByPath,
  mergeDeep
} from "./chunk-WIAOD35H.js";
import {
  computed,
  h,
  inject,
  provide,
  reactive,
  ref
} from "./chunk-2JUOC7J6.js";
import {
  __spreadProps,
  __spreadValues
} from "./chunk-AWPMEBIP.js";

// node_modules/vuetify/lib/composables/locale.mjs
var LocaleAdapterSymbol = Symbol.for("vuetify:locale-adapter");
var VuetifyLocaleSymbol = Symbol.for("vuetify:locale");
function isLocaleAdapter(x) {
  return !!x && x.hasOwnProperty("getScope") && x.hasOwnProperty("createScope") && x.hasOwnProperty("createRoot");
}
function createLocaleAdapter(app, options) {
  const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options);
  const rootInstance = adapter.createRoot(app);
  return {
    adapter,
    rootInstance
  };
}
var LANG_PREFIX = "$vuetify.";
var replace = (str, params) => {
  return str.replace(/\{(\d+)\}/g, (match, index) => {
    return String(params[+index]);
  });
};
var createTranslateFunction = (current, fallback, messages) => {
  return function(key) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    if (!key.startsWith(LANG_PREFIX)) {
      return replace(key, params);
    }
    const shortKey = key.replace(LANG_PREFIX, "");
    const currentLocale = current.value && messages.value[current.value];
    const fallbackLocale = fallback.value && messages.value[fallback.value];
    let str = getObjectValueByPath(currentLocale, shortKey, null);
    if (!str) {
      consoleWarn(`Translation key "${key}" not found in "${current.value}", trying fallback locale`);
      str = getObjectValueByPath(fallbackLocale, shortKey, null);
    }
    if (!str) {
      consoleError(`Translation key "${key}" not found in fallback`);
      str = key;
    }
    if (typeof str !== "string") {
      consoleError(`Translation key "${key}" has a non-string value`);
      str = key;
    }
    return replace(str, params);
  };
};
function createNumberFunction(current, fallback) {
  return (value, options) => {
    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options);
    return numberFormat.format(value);
  };
}
function createDefaultLocaleAdapter(options) {
  const createScope = (options2) => {
    const current = ref(options2.current);
    const fallback = ref(options2.fallback);
    const messages = ref(options2.messages);
    return {
      current,
      fallback,
      messages,
      t: createTranslateFunction(current, fallback, messages),
      n: createNumberFunction(current, fallback)
    };
  };
  return {
    createRoot: (app) => {
      var _options$defaultLocal, _options$fallbackLoca, _options$messages;
      const rootScope = createScope({
        current: (_options$defaultLocal = options == null ? void 0 : options.defaultLocale) != null ? _options$defaultLocal : "en",
        fallback: (_options$fallbackLoca = options == null ? void 0 : options.fallbackLocale) != null ? _options$fallbackLoca : "en",
        messages: (_options$messages = options == null ? void 0 : options.messages) != null ? _options$messages : {
          en: en_default
        }
      });
      app.provide(VuetifyLocaleSymbol, rootScope);
      return rootScope;
    },
    getScope: () => {
      const currentScope = inject(VuetifyLocaleSymbol);
      if (!currentScope)
        throw new Error("[Vuetify] Could not find injected locale instance");
      return currentScope;
    },
    createScope: (options2) => {
      const currentScope = inject(VuetifyLocaleSymbol);
      if (!currentScope)
        throw new Error("[Vuetify] Could not find injected locale instance");
      const newScope = createScope({
        current: computed(() => {
          var _options$locale;
          return (_options$locale = options2 == null ? void 0 : options2.locale) != null ? _options$locale : currentScope.current.value;
        }),
        fallback: computed(() => {
          var _options$locale2;
          return (_options$locale2 = options2 == null ? void 0 : options2.locale) != null ? _options$locale2 : currentScope.fallback.value;
        }),
        messages: computed(() => {
          var _options$messages2;
          return (_options$messages2 = options2 == null ? void 0 : options2.messages) != null ? _options$messages2 : currentScope.messages.value;
        })
      });
      provide(VuetifyLocaleSymbol, newScope);
      return newScope;
    }
  };
}

// node_modules/vuetify/lib/iconsets/mdi.mjs
var aliases = {
  collapse: "mdi-chevron-up",
  complete: "mdi-check",
  cancel: "mdi-close-circle",
  close: "mdi-close",
  delete: "mdi-close-circle",
  clear: "mdi-close-circle",
  success: "mdi-check-circle",
  info: "mdi-information",
  warning: "mdi-alert-circle",
  error: "mdi-close-circle",
  prev: "mdi-chevron-left",
  next: "mdi-chevron-right",
  checkboxOn: "mdi-checkbox-marked",
  checkboxOff: "mdi-checkbox-blank-outline",
  checkboxIndeterminate: "mdi-minus-box",
  delimiter: "mdi-circle",
  sort: "mdi-arrow-up",
  expand: "mdi-chevron-down",
  menu: "mdi-menu",
  subgroup: "mdi-menu-down",
  dropdown: "mdi-menu-down",
  radioOn: "mdi-radiobox-marked",
  radioOff: "mdi-radiobox-blank",
  edit: "mdi-pencil",
  ratingEmpty: "mdi-star-outline",
  ratingFull: "mdi-star",
  ratingHalf: "mdi-star-half-full",
  loading: "mdi-cached",
  first: "mdi-page-first",
  last: "mdi-page-last",
  unfold: "mdi-unfold-more-horizontal",
  file: "mdi-paperclip",
  plus: "mdi-plus",
  minus: "mdi-minus"
};
var mdi = {
  component: (props) => h(VClassIcon, __spreadProps(__spreadValues({}, props), {
    class: "mdi"
  }))
};

// node_modules/vuetify/lib/framework.mjs
var createVuetify = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const install = (app) => {
    const {
      aliases: aliases2 = {},
      components = {},
      directives = {},
      icons = {}
    } = options;
    for (const key in directives) {
      app.directive(key, directives[key]);
    }
    for (const key in components) {
      app.component(key, components[key]);
    }
    for (const key in aliases2) {
      app.component(key, defineComponent(__spreadProps(__spreadValues({}, aliases2[key]), {
        name: key
      })));
    }
    app.provide(DefaultsSymbol, createDefaults(options.defaults));
    app.provide(DisplaySymbol, createDisplay(options.display));
    app.provide(ThemeSymbol, createTheme(app, options.theme));
    app.provide(IconSymbol, mergeDeep({
      defaultSet: "mdi",
      sets: __spreadProps(__spreadValues({}, defaultSets), {
        mdi
      }),
      aliases
    }, icons));
    const {
      adapter,
      rootInstance
    } = createLocaleAdapter(app, options == null ? void 0 : options.locale);
    app.provide(LocaleAdapterSymbol, adapter);
    app.provide(RtlSymbol, createRtl(rootInstance, options == null ? void 0 : options.locale));
    function inject2(key) {
      var _vm$parent$provides, _vm$parent, _vm$vnode$appContext;
      const vm = this.$;
      const provides = (_vm$parent$provides = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _vm$parent$provides : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
      if (provides && key in provides) {
        return provides[key];
      }
    }
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject2.call(this, DefaultsSymbol),
            display: inject2.call(this, DisplaySymbol),
            theme: inject2.call(this, ThemeSymbol),
            icons: inject2.call(this, IconSymbol),
            locale: inject2.call(this, LocaleAdapterSymbol),
            rtl: inject2.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install
  };
};
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useRtl,
  useTheme
};
//# sourceMappingURL=vuetify.js.map
