{
  "version": 3,
  "sources": ["../../vuetify/src/composables/dimensions.ts", "../../vuetify/src/composables/variant.tsx"],
  "sourcesContent": ["// Utilities\nimport { computed } from 'vue'\nimport { convertToUnit, propsFactory } from '@/util'\n\n// Types\nexport interface DimensionProps {\n  height?: number | string\n  maxHeight?: number | string\n  maxWidth?: number | string\n  minHeight?: number | string\n  minWidth?: number | string\n  width?: number | string\n}\n\n// Composables\nexport const makeDimensionProps = propsFactory({\n  height: [Number, String],\n  maxHeight: [Number, String],\n  maxWidth: [Number, String],\n  minHeight: [Number, String],\n  minWidth: [Number, String],\n  width: [Number, String],\n}, 'dimension')\n\nexport function useDimension (props: DimensionProps) {\n  const dimensionStyles = computed(() => ({\n    height: convertToUnit(props.height),\n    maxHeight: convertToUnit(props.maxHeight),\n    maxWidth: convertToUnit(props.maxWidth),\n    minHeight: convertToUnit(props.minHeight),\n    minWidth: convertToUnit(props.minWidth),\n    width: convertToUnit(props.width),\n  }))\n\n  return { dimensionStyles }\n}\n", "// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed, unref } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { MaybeRef } from '@/util'\n\nexport const allowedVariants = [\n  'outlined',\n  'plain',\n  'text',\n  'contained',\n  'contained-flat',\n  'contained-text',\n] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: string\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <div class={`${name}__overlay`} /> }\n\n      <div class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'contained',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (\n  props: MaybeRef<VariantProps>,\n  name = getCurrentInstanceName(),\n) {\n  const variantClasses = computed(() => {\n    const { variant } = unref(props)\n    return `${name}--variant-${variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => {\n    const { variant, color } = unref(props)\n    return {\n      [['contained', 'contained-flat'].includes(variant) ? 'background' : 'text']: color,\n    }\n  }))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAeO,IAAM,qBAAqB,aAAa;EAC7C,QAAQ,CAAC,QAAQ,MAAT;EACR,WAAW,CAAC,QAAQ,MAAT;EACX,UAAU,CAAC,QAAQ,MAAT;EACV,WAAW,CAAC,QAAQ,MAAT;EACX,UAAU,CAAC,QAAQ,MAAT;EACV,OAAO,CAAC,QAAQ,MAAT;AANsC,GAO5C,WAP2C;AASvC,sBAAuB,OAAuB;AACnD,QAAM,kBAAkB,SAAS,MAAO;IACtC,QAAQ,cAAc,MAAM,MAAP;IACrB,WAAW,cAAc,MAAM,SAAP;IACxB,UAAU,cAAc,MAAM,QAAP;IACvB,WAAW,cAAc,MAAM,SAAP;IACxB,UAAU,cAAc,MAAM,QAAP;IACvB,OAAO,cAAc,MAAM,KAAP;EANkB,EAAR;AAShC,SAAO;IAAE;EAAF;AACR;;;ACxBM,IAAM,kBAAkB,CAC7B,YACA,SACA,QACA,aACA,kBACA,gBAN6B;AAgBxB,qBAAsB,aAAsB,MAAc;AAC/D,SAAA,YAAA,UAAA,MAAA,CAEM,eAAW,YAAA,OAAA;IAAA,SAAiB,GAAE;EAAnB,GAAA,IAAA,GAFjB,YAAA,OAAA;IAAA,SAIiB,GAAE;EAJnB,GAAA,IAAA,CAAA,CAAA;AAOD;AAEM,IAAM,mBAAmB,aAAa;EAC3C,OAAO;EACP,SAAS;IACP,MAAM;IACN,SAAS;IACT,WAAY,OAAW,gBAAgB,SAAS,CAAzB;EAHhB;AAFkC,GAO1C,SAPyC;AASrC,oBACL,OAEA;AAAA,MADA,OACA,UAAA,SAAA,KAAA,UAAA,OAAA,SAAA,UAAA,KADO,uBAAsB;AAE7B,QAAM,iBAAiB,SAAS,MAAM;AACpC,UAAM;MAAE;QAAY,MAAM,KAAD;AACzB,WAAQ,GAAE,iBAAiB;EAC5B,CAH8B;AAK/B,QAAM;IAAE;IAAc;MAAgB,SAAS,SAAS,MAAM;AAC5D,UAAM;MAAE;MAAS;QAAU,MAAM,KAAD;AAChC,WAAO;OACJ,CAAC,aAAa,gBAAd,EAAgC,SAAS,OAAzC,IAAoD,eAAe,SAAS;IADxE;EAGR,CALsD,CAAT;AAO9C,SAAO;IAAE;IAAc;IAAa;EAA7B;AACR;",
  "names": []
}
