import {
  VAvatar
} from "./chunk-DNJ6SOTR.js";
import {
  makePositionProps,
  usePosition
} from "./chunk-VTL7UMBZ.js";
import {
  VDefaultsProvider,
  VImg
} from "./chunk-2UHGBGKB.js";
import {
  genOverlays,
  makeVariantProps,
  useVariant
} from "./chunk-D2XP5QHS.js";
import {
  Ripple,
  makeDensityProps,
  useDensity
} from "./chunk-WLPJEKET.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-CHKNSBGH.js";
import "./chunk-ZORWLBYQ.js";
import "./chunk-HKKIYXXJ.js";
import {
  makeBorderProps,
  makeElevationProps,
  makeRoundedProps,
  useBorder,
  useElevation,
  useRounded
} from "./chunk-KB2W3AZ5.js";
import {
  makeRouterProps,
  useLink
} from "./chunk-AVUVHU2D.js";
import "./chunk-7WR4I7IW.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-3GMUFSDV.js";
import {
  makeTagProps
} from "./chunk-THFDFTRQ.js";
import {
  createSimpleFunctional,
  defineComponent,
  provideDefaults,
  useRender
} from "./chunk-ALJB2OGJ.js";
import {
  createVNode,
  resolveDirective,
  withDirectives
} from "./chunk-2JUOC7J6.js";
import {
  __spreadValues
} from "./chunk-AWPMEBIP.js";

// node_modules/vuetify/lib/components/VCard/VCard.mjs
import "/Users/zhijunsong/Documents/vitetestbuild/node_modules/vuetify/lib/components/VCard/VCard.css";

// node_modules/vuetify/lib/components/VCard/VCardActions.mjs
var VCardActions = defineComponent({
  name: "VCardActions",
  setup(_, _ref) {
    let {
      slots
    } = _ref;
    provideDefaults({
      VBtn: {
        variant: "text"
      }
    });
    useRender(() => {
      var _slots$default;
      return createVNode("div", {
        "class": "v-card-actions"
      }, [slots == null ? void 0 : (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]);
    });
    return {};
  }
});

// node_modules/vuetify/lib/components/VCard/VCardAvatar.mjs
var VCardAvatar = createSimpleFunctional("v-card-avatar");

// node_modules/vuetify/lib/components/VCard/VCardContent.mjs
var VCardContent = createSimpleFunctional("v-card-content");

// node_modules/vuetify/lib/components/VCard/VCardHeader.mjs
var VCardHeader = createSimpleFunctional("v-card-header");

// node_modules/vuetify/lib/components/VCard/VCardHeaderText.mjs
var VCardHeaderText = createSimpleFunctional("v-card-header-text");

// node_modules/vuetify/lib/components/VCard/VCardImg.mjs
var VCardImg = createSimpleFunctional("v-card-img");

// node_modules/vuetify/lib/components/VCard/VCardSubtitle.mjs
var VCardSubtitle = createSimpleFunctional("v-card-subtitle");

// node_modules/vuetify/lib/components/VCard/VCardText.mjs
var VCardText = createSimpleFunctional("v-card-text");

// node_modules/vuetify/lib/components/VCard/VCardTitle.mjs
var VCardTitle = createSimpleFunctional("v-card-title");

// node_modules/vuetify/lib/components/VCard/VCard.mjs
var VCard = defineComponent({
  name: "VCard",
  directives: {
    Ripple
  },
  props: __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({
    appendAvatar: String,
    appendIcon: String,
    disabled: Boolean,
    flat: Boolean,
    hover: Boolean,
    image: String,
    link: Boolean,
    prependAvatar: String,
    prependIcon: String,
    ripple: Boolean,
    subtitle: String,
    text: String,
    title: String
  }, makeThemeProps()), makeBorderProps()), makeDensityProps()), makeDimensionProps()), makeElevationProps()), makePositionProps()), makeRoundedProps()), makeRouterProps()), makeTagProps()), makeVariantProps({
    variant: "contained"
  })),
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(props);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      positionClasses,
      positionStyles
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const link = useLink(props, attrs);
    return () => {
      var _slots$image, _slots$media, _slots$headerText, _slots$default;
      const Tag = link.isLink.value ? "a" : props.tag;
      const hasTitle = !!(slots.title || props.title);
      const hasSubtitle = !!(slots.subtitle || props.subtitle);
      const hasHeaderText = hasTitle || hasSubtitle;
      const hasAppend = !!(slots.append || props.appendAvatar || props.appendIcon);
      const hasPrepend = !!(slots.prepend || props.prependAvatar || props.prependIcon);
      const hasImage = !!(slots.image || props.image);
      const hasHeader = hasHeaderText || hasPrepend || hasAppend;
      const hasText = !!(slots.text || props.text);
      const isClickable = !props.disabled && (link.isClickable.value || props.link);
      return withDirectives(createVNode(Tag, {
        "class": ["v-card", {
          "v-card--disabled": props.disabled,
          "v-card--flat": props.flat,
          "v-card--hover": props.hover && !(props.disabled || props.flat),
          "v-card--link": isClickable
        }, themeClasses.value, borderClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],
        "style": [colorStyles.value, dimensionStyles.value, positionStyles.value],
        "href": link.href.value,
        "onClick": isClickable && link.navigate
      }, {
        default: () => [genOverlays(isClickable, "v-card"), hasImage && createVNode(VDefaultsProvider, {
          "defaults": {
            VImg: {
              cover: true,
              src: props.image
            }
          }
        }, {
          default: () => [createVNode(VCardImg, null, {
            default: () => [slots.image ? (_slots$image = slots.image) == null ? void 0 : _slots$image.call(slots) : createVNode(VImg, {
              "alt": ""
            }, null)]
          })]
        }), (_slots$media = slots.media) == null ? void 0 : _slots$media.call(slots), hasHeader && createVNode(VCardHeader, null, {
          default: () => [hasPrepend && createVNode(VDefaultsProvider, {
            "defaults": {
              VAvatar: {
                density: props.density,
                icon: props.prependIcon,
                image: props.prependAvatar
              }
            }
          }, {
            default: () => [createVNode(VCardAvatar, null, {
              default: () => [slots.prepend ? slots.prepend() : createVNode(VAvatar, null, null)]
            })]
          }), hasHeaderText && createVNode(VCardHeaderText, null, {
            default: () => [hasTitle && createVNode(VCardTitle, null, {
              default: () => [slots.title ? slots.title() : props.title]
            }), hasSubtitle && createVNode(VCardSubtitle, null, {
              default: () => [slots.subtitle ? slots.subtitle() : props.subtitle]
            }), (_slots$headerText = slots.headerText) == null ? void 0 : _slots$headerText.call(slots)]
          }), hasAppend && createVNode(VDefaultsProvider, {
            "defaults": {
              VAvatar: {
                density: props.density,
                icon: props.appendIcon,
                image: props.appendAvatar
              }
            }
          }, {
            default: () => [createVNode(VCardAvatar, null, {
              default: () => [slots.append ? slots.append() : createVNode(VAvatar, null, null)]
            })]
          })]
        }), hasText && createVNode(VCardText, null, {
          default: () => [slots.text ? slots.text() : props.text]
        }), slots.content && createVNode(VCardContent, null, {
          default: slots.content
        }), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots), slots.actions && createVNode(VCardActions, null, {
          default: slots.actions
        })]
      }), [[resolveDirective("ripple"), isClickable]]);
    };
  }
});
export {
  VCard,
  VCardActions,
  VCardAvatar,
  VCardContent,
  VCardHeader,
  VCardHeaderText,
  VCardImg,
  VCardSubtitle,
  VCardText,
  VCardTitle
};
//# sourceMappingURL=vuetify_lib_components_VCard_index_mjs.js.map
