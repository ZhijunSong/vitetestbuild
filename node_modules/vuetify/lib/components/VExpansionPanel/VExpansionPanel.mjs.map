{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.tsx"],"names":["makeVExpansionPanelTitleProps","VExpansionPanelTitle","VExpansionPanelText","VExpansionPanelSymbol","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makeRoundedProps","useRounded","useBackgroundColor","makeTagProps","makeLazyProps","computed","provide","defineComponent","useRender","VExpansionPanel","name","props","title","String","text","bgColor","setup","slots","groupItem","backgroundColorClasses","backgroundColorStyles","elevationClasses","roundedClasses","isDisabled","disabled","value","isBeforeSelected","index","group","items","findIndex","item","id","isSelected","selected","some","indexOf","isAfterSelected","hasText","hasTitle","collapseIcon","color","expandIcon","hideActions","ripple","eager","default"],"mappings":"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","sourcesContent":["// Components\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\nimport { VExpansionPanelText } from './VExpansionPanelText'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeLazyProps } from '@/composables/lazy'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VExpansionPanel = defineComponent({\n  name: 'VExpansionPanel',\n\n  props: {\n    title: String,\n    text: String,\n    bgColor: String,\n\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makeLazyProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        groupItem.group.selected.value.some(id => groupItem.group.items.value.indexOf(id) - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={ backgroundColorStyles.value }\n          aria-expanded={ groupItem.isSelected.value }\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              collapseIcon={ props.collapseIcon }\n              color={ props.color }\n              expandIcon={ props.expandIcon }\n              hideActions={ props.hideActions }\n              ripple={ props.ripple }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          ) }\n\n          { hasText && (\n            <VExpansionPanelText eager={ props.eager }>\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          ) }\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"],"file":"VExpansionPanel.mjs"}