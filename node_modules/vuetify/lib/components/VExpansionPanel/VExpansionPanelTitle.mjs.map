{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelTitle.tsx"],"names":["VIcon","VExpansionPanelSymbol","useBackgroundColor","Ripple","computed","inject","defineComponent","propsFactory","useRender","makeVExpansionPanelTitleProps","color","String","expandIcon","type","default","collapseIcon","hideActions","Boolean","ripple","Object","VExpansionPanelTitle","name","directives","props","setup","slots","expansionPanel","Error","backgroundColorClasses","backgroundColorStyles","slotProps","disabled","value","expanded","isSelected","undefined","toggle","actions"],"mappings":";AAAA;SACSA,K;SACAC,qB,kCAET;;SACSC,kB,uCAET;;SACSC,M,6CAET;;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,KAAjC;SACSC,e,EAAiBC,Y,EAAcC,S;AAExC,OAAO,MAAMC,6BAA6B,GAAGF,YAAY,CAAC;AACxDG,EAAAA,KAAK,EAAEC,MADiD;AAExDC,EAAAA,UAAU,EAAE;AACVC,IAAAA,IAAI,EAAEF,MADI;AAEVG,IAAAA,OAAO,EAAE;AAFC,GAF4C;AAMxDC,EAAAA,YAAY,EAAE;AACZF,IAAAA,IAAI,EAAEF,MADM;AAEZG,IAAAA,OAAO,EAAE;AAFG,GAN0C;AAUxDE,EAAAA,WAAW,EAAEC,OAV2C;AAWxDC,EAAAA,MAAM,EAAE;AACNL,IAAAA,IAAI,EAAE,CAACI,OAAD,EAAUE,MAAV,CADA;AAENL,IAAAA,OAAO,EAAE;AAFH;AAXgD,CAAD,CAAlD;AAiBP,OAAO,MAAMM,oBAAoB,GAAGd,eAAe,CAAC;AAClDe,EAAAA,IAAI,EAAE,sBAD4C;AAGlDC,EAAAA,UAAU,EAAE;AAAEnB,IAAAA;AAAF,GAHsC;AAKlDoB,EAAAA,KAAK,EAAE,EACL,GAAGd,6BAA6B;AAD3B,GAL2C;;AASlDe,EAAAA,KAAK,CAAED,KAAF,QAAoB;AAAA,QAAX;AAAEE,MAAAA;AAAF,KAAW;AACvB,UAAMC,cAAc,GAAGrB,MAAM,CAACJ,qBAAD,CAA7B;AAEA,QAAI,CAACyB,cAAL,EAAqB,MAAM,IAAIC,KAAJ,CAAU,+EAAV,CAAN;AAErB,UAAM;AAAEC,MAAAA,sBAAF;AAA0BC,MAAAA;AAA1B,QAAoD3B,kBAAkB,CAACqB,KAAD,EAAQ,OAAR,CAA5E;AAEA,UAAMO,SAAS,GAAG1B,QAAQ,CAAC,OAAO;AAChCW,MAAAA,YAAY,EAAEQ,KAAK,CAACR,YADY;AAEhCgB,MAAAA,QAAQ,EAAEL,cAAc,CAACK,QAAf,CAAwBC,KAFF;AAGhCC,MAAAA,QAAQ,EAAEP,cAAc,CAACQ,UAAf,CAA0BF,KAHJ;AAIhCpB,MAAAA,UAAU,EAAEW,KAAK,CAACX;AAJc,KAAP,CAAD,CAA1B;AAOAJ,IAAAA,SAAS,CAAC;AAAA;;AAAA;AAAA,iBAEC,CACL,yBADK,EAEL;AACE,6CAAmCkB,cAAc,CAACQ,UAAf,CAA0BF;AAD/D,SAFK,EAKLJ,sBAAsB,CAACI,KALlB,CAFD;AAAA,iBASEH,qBAAqB,CAACG,KATxB;AAAA,gBAUD,QAVC;AAAA,oBAWKN,cAAc,CAACK,QAAf,CAAwBC,KAAxB,GAAgC,CAAC,CAAjC,GAAqCG,SAX1C;AAAA,oBAYKT,cAAc,CAACK,QAAf,CAAwBC,KAZ7B;AAAA,yBAaUN,cAAc,CAACQ,UAAf,CAA0BF,KAbpC;AAAA,mBAcIN,cAAc,CAACU;AAdnB;AAAA,iBAiBK;AAjBL,kCAmBJX,KAAK,CAACX,OAnBF,qBAmBJ,oBAAAW,KAAK,EAAWK,SAAS,CAACE,KAArB,CAnBD,EAqBJ,CAACT,KAAK,CAACP,WAAP;AAAA,iBACW;AADX,UAGIS,KAAK,CAACY,OAAN,GAAgBZ,KAAK,CAACY,OAAN,CAAcP,SAAS,CAACE,KAAxB,CAAhB;AAAA,gBACgBN,cAAc,CAACQ,UAAf,CAA0BF,KAA1B,GAAkCT,KAAK,CAACR,YAAxC,GAAuDQ,KAAK,CAACX;AAD7E,cAHJ,EArBI,mCAeKW,KAAK,CAACL,MAfX;AAAA,KAAD,CAAT;AAgCA,WAAO,EAAP;AACD;;AAxDiD,CAAD,CAA5C","sourcesContent":["// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { defineComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: String,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: String,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  ripple: {\n    type: [Boolean, Object],\n    default: false,\n  },\n})\n\nexport const VExpansionPanelTitle = defineComponent({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: {\n    ...makeVExpansionPanelTitleProps(),\n  },\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n          },\n          backgroundColorClasses.value,\n        ]}\n        style={ backgroundColorStyles.value }\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ expansionPanel.toggle }\n        v-ripple={ props.ripple }\n      >\n        <div class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <div class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </div>\n        ) }\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n"],"file":"VExpansionPanelTitle.mjs"}